<%= javascript_include_tag "prototype.js" %>
<%= javascript_include_tag "jquery.min.js" %>
<%= javascript_include_tag "jquery.qtip.min.js" %>
<%= stylesheet_link_tag "jquery.qtip.min.css" %>




<!-- JS代码 -->
<script language="Javascript">
    //交易费用修改
    var computearbfee = new Array();
    var computetransfee = new Array();
    var userchange_commodityid = new Array();
    var userchange_tradecharge = new Array();

    //交割保证金占用成本 delivermarginfee
    var delivermarginfee = new Array();
    var xml_tradeunit = new Array();
    var xml_storageday = new Array();
    //交易保证金占用成本 trademarginfee
    var trademarginfee = new Array();
    var xml_issinglemargin = new Array();
    var xml_firstmarginrate = new Array();
    var xml_secondmarginrate = new Array();
    var xml_D1 = new Array();
    //存储费用 storagefee
    var storagefee = new Array();
    var xml_storagedailyfee = new Array();
    //交割费用
    var deliverfee = new Array();
    var xml_deliverchargebyhand = new Array();
    //增值税费用
    var vatfee = new Array();
    var xml_vatrate = new Array();
    //db data
    var userdb_lendrate = new Array();
    var userdb_commodityid = new Array();
    var userdb_trademargingap = new Array();
    var defaultdb_tradecharge = new Array();
    var defaultdb_lendrate = new Array();
    var defaultdb_commodityid = new Array();
    var defaultdb_trademargingap = new Array();
    //default初始化
    var defaultdb_num=<%= @defaultdb_num%>

<% for i in 0..@defaultdb_num-1 do%>
            defaultdb_commodityid[<%=i%>]='<%= @defaultdb_commodityid[i]%>';
<% end%>
    defaultdb_lendrate=<%= @defaultdb_lendrate%>
    defaultdb_tradecharge=<%= @defaultdb_tradecharge%>
    defaultdb_trademargingap=<%= @defaultdb_trademargingap%>

    //flag
    var userflag=<%=@userflag%>;

    //定制服务初始化
    if(userflag!=0)
    {
        var tradechargechange_num=<%= @tradechargechange_num %>+1;
    <% for i in 0..@tradechargechange_num do%>
            userchange_commodityid[<%=i%>]='<%= @userchange_commodityid[i]%>';
    <% end%>
    //对象转化为数组
    userchange_tradecharge=<%= @userchange_tradecharge%>
     //字符串对象额外操作
        var userdb_num=<%= @userdb_num%>
        <% for i in 0..@userdb_num-1 do%>
                userdb_commodityid[<%=i%>]='<%= @userdb_commodityid[i]%>';
    <% end%>
        userdb_lendrate=<%= @userdb_lendrate%>
        userdb_trademargingap=<%= @userdb_trademargingap%>

         //the new table var
       }

     function loadXML(xmlString){
         var xmlDoc=null;
         if(!window.DOMParser && window.ActiveXObject){
             var xmlDomVersions = ['MSXML.2.DOMDocument.6.0','MSXML.2.DOMDocument.3.0','Microsoft.XMLDOM'];
             for(var i=0;i<xmlDomVersions.length;i++){
                 try{
                     xmlDoc = new ActiveXObject(xmlDomVersions[i]);
                     xmlDoc.async = false;
                     xmlDoc.loadXML(xmlString);
                     break;
                 }catch(e){
                 }
             }
         }
         else if(window.DOMParser && document.implementation && document.implementation.createDocument){
             try{
                 domParser = new  DOMParser();
                 xmlDoc = domParser.parseFromString(xmlString, 'text/xml');
             }catch(e){
             }
         }
         else{
             return null;
         }
         return xmlDoc;
     }

    function createxmlhttp()
     {
          xmlhttpobj = false;
          try{
			  xmlhttpobj=new ActiveXObject();
          }catch(e){
              try{
                  xmlhttpobj=new ActiveXObject("MSXML2.XMLHTTP");
              }catch(e2){
                  try{
                      xmlhttpobj=new ActiveXObject("Microsoft.XMLHTTP");
                      }catch(e3){
                      xmlhttpobj = false;
                  }
              }
          }
		  if((!xmlhttpobj)&&(window.XMLHttpRequest))
		  {
			 xmlhttpobj=new XMLHttpRequest();
		  }

          return xmlhttpobj;
     }

	function sortby(first, second){
	    if(first.value>second.value){
		   return -1;
		}else{
		   return 1;
		}
	 }
	function returnrate(id, value){ 
	  this.id = id; 
	  this.value = value; 
	}
	function MKDataState(mtcounter, isgetMKData){ 
	  this.mtcounter = mtcounter; 
	  this.isgetMKData = isgetMKData; 
	}	 

    function getxml()
    {
        var xmlhttpobj_xml = createxmlhttp();
        if(xmlhttpobj_xml){
            url = document.location.href.substring(0,document.location.href.indexOf(window.document.location.pathname))+"/assets/CSpreadCostPairs.xml";
		 xmlhttpobj_xml.open("get",url,true);
		 xmlhttpobj_xml.setRequestHeader("Cache-Control","no-cache");
		 xmlhttpobj_xml.setRequestHeader("If-Modified-Since","0");
		 xmlhttpobj_xml.setRequestHeader("Content-Type","application/x-www-form-urlencoded;charset=utf-8");
            xmlhttpobj_xml.send(null);
            xmlhttpobj_xml.onreadystatechange=function(){
                if(xmlhttpobj_xml.readyState==4){
                    if(xmlhttpobj_xml.status==200){
                        var htmlxxx = xmlhttpobj_xml.responseText;
                        var xmldoc=loadXML(htmlxxx);
					 var elements = xmldoc.getElementsByTagName("pair");
					 if(elements.length!=0){
                         for (var i = 0; i < elements.length; i++)
                         {
                             //交割保证金占用成本 delivermarginfee
                             xml_tradeunit[i]=parseFloat(elements[i].getElementsByTagName("tradeunit")[0].firstChild.nodeValue);
                             xml_storageday[i]=parseFloat(elements[i].getElementsByTagName("D2")[0].firstChild.nodeValue)-parseFloat(elements[i].getElementsByTagName("D1")[0].firstChild.nodeValue);
                             //交易保证金占用成本
                             xml_issinglemargin[i]=parseFloat(elements[i].getElementsByTagName("issinglemargin")[0].firstChild.nodeValue);
                             xml_firstmarginrate[i]=parseFloat(elements[i].getElementsByTagName("firstmarginrate")[0].firstChild.nodeValue);
                             xml_secondmarginrate[i]=parseFloat(elements[i].getElementsByTagName("secondmarginrate")[0].firstChild.nodeValue);
                             xml_D1[i]=parseFloat(elements[i].getElementsByTagName("D1")[0].firstChild.nodeValue);
                             xml_storagedailyfee[i]=parseFloat(elements[i].getElementsByTagName("storagedailyfee")[0].firstChild.nodeValue);
                             xml_deliverchargebyhand[i]=parseFloat(elements[i].getElementsByTagName("deliverchargebyhand")[0].firstChild.nodeValue);
                             xml_vatrate[i]=parseFloat(elements[i].getElementsByTagName("vatrate")[0].firstChild.nodeValue);
                         }
                     }
                     }
                }
            }
        }
    }
    getxml();
     function getAjax()
     {
         var xmlhttpobj = createxmlhttp();
         if(xmlhttpobj){
             url = document.location.href.substring(0,document.location.href.indexOf(window.document.location.pathname))+"/assets/CSpreadCostStrRunOnTime.xml";
			 xmlhttpobj.open("get",url,true);
			 xmlhttpobj.setRequestHeader("Cache-Control","no-cache");
			 xmlhttpobj.setRequestHeader("If-Modified-Since","0");
			 xmlhttpobj.setRequestHeader("Content-Type","application/x-www-form-urlencoded;charset=utf-8");  
             xmlhttpobj.send(null);			 
             xmlhttpobj.onreadystatechange=function(){
                 if(xmlhttpobj.readyState==4){
                     if(xmlhttpobj.status==200){
                         var htmlxxx = xmlhttpobj.responseText;
                         var xmldoc=loadXML(htmlxxx);
						 var elements = xmldoc.getElementsByTagName("pair");

						 if(elements.length!=0){

                             //original
							 var tbs = '<table class="rttableformat">';
							 var tbttl = '<tr><th>套利合约对名</th><th>近月合约价格</th><th>远月合约价格</th><th><a title="最新价差 是远月合约价格减去近月合约价格">最新价差</a></th><th><a title="持仓成本 是您做这笔套利对交易所需要付出的成本金额。持仓成本 = 存储费用 + 交割费用 + 交易费用 + 保证金占用费用 + 交割保证金占有费用 + 增值税费用">持仓成本</a></th><th>年化收益率</th><th>更新时间</th></tr>';
                             tbs += tbttl;
							 var tbstrarray = new Array();		
							 var returnratearray = new Array();

							 for (var i = 0; i < elements.length; i++) {
                                 //默认用户

                                 if(userflag==0)
                                 {
                                     //默认所有计算
                                     for(var q=0;q<defaultdb_num-1;q++)
                                     {
                                         function default_s()
                                         {
                                             vatfee[i]=(parseFloat(elements[i].getElementsByTagName("secondprice")[0].firstChild.nodeValue)
                                                     -parseFloat(elements[i].getElementsByTagName("firstprice")[0].firstChild.nodeValue))*xml_tradeunit[i]
                                                     *xml_vatrate[i]/(1+xml_vatrate[i])
                                             //交割费用
                                             deliverfee[i]=xml_deliverchargebyhand[i]*2
                                             //存储费用
                                             storagefee[i]=xml_storagedailyfee[i]*2
                                             //交易费用
                                             computetransfee[i]=defaultdb_tradecharge[q]*2;
                                             //交易保证金占用成本
                                             if(xml_issinglemargin[i]==1)
                                             {
                                                 trademarginfee[i]=parseFloat(elements[i].getElementsByTagName("firstprice")[0].firstChild.nodeValue)
                                                         *xml_tradeunit[i]*(xml_firstmarginrate[i]+defaultdb_trademargingap[q])*defaultdb_lendrate[q]*xml_D1[i]/365
                                                         +parseFloat(elements[i].getElementsByTagName("secondprice")[0].firstChild.nodeValue)
                                                         *xml_tradeunit[i]*(xml_secondmarginrate[i]+defaultdb_trademargingap[q])*defaultdb_lendrate[q]*xml_storageday[i]/365
                                             }
                                 else
                                 {
                                                 trademarginfee[i]=(parseFloat(elements[i].getElementsByTagName("firstprice")[0].firstChild.nodeValue)
                                                         *xml_tradeunit[i]*(xml_firstmarginrate[i]+defaultdb_trademargingap[q])+parseFloat(elements[i].getElementsByTagName("secondprice")[0].firstChild.nodeValue)
                                                         *xml_tradeunit[i]*(xml_secondmarginrate[i]+defaultdb_trademargingap[q]))*defaultdb_lendrate[q]*xml_D1[i]/365
                                                         +parseFloat(elements[i].getElementsByTagName("secondprice")[0].firstChild.nodeValue)
                                                         *xml_tradeunit[i]*(xml_secondmarginrate[i]+defaultdb_trademargingap[q])*defaultdb_lendrate[q]*xml_storageday[i]/365
                                             }

                                             //默认交割保证金占用成本
                                             delivermarginfee[i]=parseFloat(elements[i].getElementsByTagName("firstprice")[0].firstChild.nodeValue)
                                                     *xml_tradeunit[i]*defaultdb_lendrate[q]*xml_storageday[i]/365;
                                         }

                                         if(elements[i].getElementsByTagName("name")[0].firstChild.nodeValue.substr(0,2)==defaultdb_commodityid[q])
                                     {
                                             default_s();
                                             break;

                                         }
                                         //内容同上
                                         else if(elements[i].getElementsByTagName("name")[0].firstChild.nodeValue.substr(0,1)==defaultdb_commodityid[q])
                                         {
                                             default_s();
                                             break;
                                         }
                                 }
                                 }
                                 //用户
                                 else
                                 {
                                     //所有计算
                                     for(var q=0;q<userdb_num-1;q++)
                                     {
                                         function user()
                                         {
                                             vatfee[i]=(parseFloat(elements[i].getElementsByTagName("secondprice")[0].firstChild.nodeValue)
                                                 -parseFloat(elements[i].getElementsByTagName("firstprice")[0].firstChild.nodeValue))*xml_tradeunit[i]
                                                 *xml_vatrate[i]/(1+xml_vatrate[i])
                                             //交割费用
                                             deliverfee[i]=xml_deliverchargebyhand[i]*2
                                             //存储费用
                                             storagefee[i]=xml_storagedailyfee[i]*2
                                             //交易保证金占用成本
                                             if(xml_issinglemargin[i]==1)
                                             {
                                                 trademarginfee[i]=parseFloat(elements[i].getElementsByTagName("firstprice")[0].firstChild.nodeValue)
                                                         *xml_tradeunit[i]*(xml_firstmarginrate[i]+userdb_trademargingap[q])*userdb_lendrate[q]*xml_D1[i]/365
                                                     +parseFloat(elements[i].getElementsByTagName("secondprice")[0].firstChild.nodeValue)
                                                     *xml_tradeunit[i]*(xml_secondmarginrate[i]+userdb_trademargingap[q])*userdb_lendrate[q]*xml_storageday[i]/365
                                             }
                                             else
                                             {
                                                 trademarginfee[i]=(parseFloat(elements[i].getElementsByTagName("firstprice")[0].firstChild.nodeValue)
                                                         *xml_tradeunit[i]*(xml_firstmarginrate[i]+userdb_trademargingap[q])+parseFloat(elements[i].getElementsByTagName("secondprice")[0].firstChild.nodeValue)
                                                 *xml_tradeunit[i]*(xml_secondmarginrate[i]+userdb_trademargingap[q]))*userdb_lendrate[q]*xml_D1[i]/365
                                                     +parseFloat(elements[i].getElementsByTagName("secondprice")[0].firstChild.nodeValue)
                                                     *xml_tradeunit[i]*(xml_secondmarginrate[i]+userdb_trademargingap[q])*userdb_lendrate[q]*xml_storageday[i]/365
                                             }

                                             //交割保证金占用成本
                                             delivermarginfee[i]=parseFloat(elements[i].getElementsByTagName("firstprice")[0].firstChild.nodeValue)
                                                          *xml_tradeunit[i]*userdb_lendrate[q]*xml_storageday[i]/365;

                                         }
                                         if(elements[i].getElementsByTagName("name")[0].firstChild.nodeValue.substr(0,2)==userdb_commodityid[q])
                                         {
                                             user();
                                             break;
                                         }
                                         //内容同上
                                         else if(elements[i].getElementsByTagName("name")[0].firstChild.nodeValue.substr(0,1)==userdb_commodityid[q])
                                         {
                                             user();
                                             break;
                                         }
                                     }
                                     //交易费用修改（user）
                                     for(var p=0;p<tradechargechange_num;p++)
                                     {
                                         if(elements[i].getElementsByTagName("name")[0].firstChild.nodeValue.substr(0,2)==userchange_commodityid[p])
                                         {
                                             computetransfee[i]=userchange_tradecharge[p]*2;
                                             break;
                                         }
                                         else if(elements[i].getElementsByTagName("name")[0].firstChild.nodeValue.substr(0,1)==userchange_commodityid[p])
                                         {
                                             computetransfee[i]=userchange_tradecharge[p]*2;
                                             break;
                                         }
                                         else
                                             computetransfee[i]=defaultdb_tradecharge[q]*2;
                                     }
                                 }

								tbstrarray[i]="<tr>";
                                 computearbfee[i] = storagefee[i]
                                         +deliverfee[i]
                                         +trademarginfee[i]
                                         +delivermarginfee[i]
                                         +vatfee[i]
                                         +computetransfee[i];
							tbstrarray[i]+= "<td>"
									 + elements[i].getElementsByTagName("name")[0].firstChild.nodeValue + "</a></td>";
								if((elements[i].getElementsByTagName("firstprice")[0].firstChild.nodeValue>0)
									&&(elements[i].getElementsByTagName("secondprice")[0].firstChild.nodeValue>0)){
									 tbstrarray[i]+= "<td>"
										 + elements[i].getElementsByTagName("firstprice")[0].firstChild.nodeValue + "</td>";
									 tbstrarray[i]+= "<td>"
										 + elements[i].getElementsByTagName("secondprice")[0].firstChild.nodeValue + "</td>";
									 tbstrarray[i]+= "<td>"
										 + (parseFloat(elements[i].getElementsByTagName("secondprice")[0].firstChild.nodeValue)-parseFloat(elements[i].getElementsByTagName("firstprice")[0].firstChild.nodeValue)) + "</td>";

                                        tbstrarray[i]+= "<td>"+ parseFloat(computearbfee[i]).toFixed(1)
                                                + "</td>";

									 tbstrarray[i]+= "<td>"
										 + (elements[i].getElementsByTagName("computerateofreturn")[0].firstChild.nodeValue*100).toFixed(1) + "% </td>";
								     returnratearray[i]=new returnrate(i,parseFloat(elements[i].getElementsByTagName("computerateofreturn")[0].firstChild.nodeValue));
								}
								else{
									 tbstrarray[i]+= "<td> -- </td>";
									 tbstrarray[i]+= "<td> -- </td>";
									 tbstrarray[i]+= "<td> -- </td>";
									 tbstrarray[i]+= "<td> -- </td>";
									 tbstrarray[i]+= "<td> -- </td>";
									 returnratearray[i]=new returnrate(i,-10000);										 
								}
								 tbstrarray[i]+= "<td>"
									 + elements[i].getElementsByTagName("time")[0].firstChild.nodeValue + "</td>";
								 tbstrarray[i]+= "</tr>";
							}
							returnratearray.sort(sortby);
							for (var i = 0; i < elements.length; i++){
							    tbs+=tbstrarray[returnratearray[i].id];
							}
							tbs+='</table>\n';
							document.getElementById("rtpricetable").innerHTML=tbs;
						}
                     }
                 }
             }
         }
     }

	function refreshMKData()
	{
		if (g_MKDataState.isgetMKData)
		{
		   getAjax();
		}	 	
	}

	function getservertime(){
	    //var xmlhttpobj = createxmlhttp();
		//xmlhttpobj.open("HEAD",location.href,false);  
        //xmlhttpobj.send(null);		
        //var st=new Date(xmlhttpobj.getResponseHeader("Date")); 
        var st=new Date(<%= "'"+(Time.now()).inspect+"'" %>);		
		return st;   

	}

	function checktimeMKTime(){
		var servertime=getservertime();
		var endtime=new Date(servertime);
		if ((servertime.getDay()!=0)&&(servertime.getDay()!=6))
		{
		    if(servertime.getHours()<9){
				endtime.setHours(9);
				endtime.setMinutes(0);
				endtime.setSeconds(5);
                g_MKDataState.mtcounter=endtime.getTime()-servertime.getTime();
                g_MKDataState.isgetMKData=false;
                setTimeout(checktimeMKTime,g_MKDataState.mtcounter);			
			}
			else if((servertime.getHours()<15)&&(servertime.getHours()>=9)){
				endtime.setHours(15);
				endtime.setMinutes(2);
				endtime.setSeconds(0);
                g_MKDataState.mtcounter=endtime.getTime()-servertime.getTime();
                g_MKDataState.isgetMKData=true;
                setTimeout(checktimeMKTime,g_MKDataState.mtcounter);	
			}else{
				endtime.setDate(servertime.getDate()+1); 
				endtime.setHours(9);
				endtime.setMinutes(0);
				endtime.setSeconds(5);	
                g_MKDataState.mtcounter=endtime.getTime()-servertime.getTime();
                g_MKDataState.isgetMKData=false;
                setTimeout(checktimeMKTime,g_MKDataState.mtcounter);				
			}
		}else{
			endtime.setDate(servertime.getDate()+1); 
			endtime.setHours(9);
			endtime.setMinutes(0);
			endtime.setSeconds(5);	
			g_MKDataState.mtcounter=endtime.getTime()-servertime.getTime();
			g_MKDataState.isgetMKData=false;
			setTimeout(checktimeMKTime,g_MKDataState.mtcounter);			
		}		
	}

	var g_MKDataState=new MKDataState(3600000,true);
	checktimeMKTime();
    var g_period = new PeriodicalExecuter(refreshMKData,2.0);
	getAjax();

/*
// Define our positioning and style arrays
  var at = [
          'left bottom'
      ],
      my = [
          'right bottom'
      ],
      styles = [
          'red'
      ];
*/
// Create the tooltips only on document load

//  $(document).ready(function()
//  {
//          $('a[title]').qtip();

//          $('.ironbars')
              /*
               * Lets delete the qTip data from our target element so we can apply multiple tooltips.
               * Since the data is also stored on the tooltip element itself this isn't a problem!
               *
               * Check here for more details on this: http://craigsworks.com/projects/qtip2/tutorials/advanced/#multi
               */
/*
			   .removeData('qtip')
              .qtip({
                  content: {
                      text: '您可以调节品种手续费，享受定制化服务',
                      title: {
                          text: '请点击套利合约对名',
                          button: true
                      }
                  },
                  position: {
                      my: my[0], // Use the corner...
                      at: at[0] // ...and opposite corner
                  },
                  show: {
                      event: false, // Don't specify a show event...
                      ready: true // ... but show the tooltip when ready
                  },
                  hide: false, // Don't specify a hide event either!
                  style: {
                      classes: 'ui-tooltip-shadow ui-tooltip-' + styles[0]
                  }
              });

  });
*/
</script>
	<br />
  <% if @webuser!=nil%>
  <%= button_to "个性化手续费",:controller=>"usermanagement" ,:action=>"usertradecharge", :id=>@webuser.id%>
  <%= button_to "修改贷款利率",:controller=>"usermanagement" ,:action=>"userlendrate", :id=>@webuser.id%>
  <%= button_to "修改保证金比例",:controller=>"usermanagement" ,:action=>"usertrademargin", :id=>@webuser.id%>
  <%= button_to "设置期望年化收益率",:controller=>"webusers" ,:action=>"userrateofreturn", :id=>@webuser.id%>

  <% end %>
     <div class="ironbars">
       <div id = "norisktitle">
         <h3>策略实时运行中</h3>
       </div>
       <div id = "noriskluntan">
         <a href="#remarks">我想提点意见</a>
       </div>
     </div>
	<div id ="rtpricetable">
	</div>
  <div class ="remarkstitle">
  <a name="remarks">提点意见吧?</a>
  </div>
  <div class = "newremark">
  <iframe src="../noriskmessages/new" frameborder="0" scrolling="no" height="170" width="800" marginheight="0" marginwidth="0"></iframe>
  </div>
  <div class ="remarkslist">
    <h3>所有评论</h3>
<iframe src="../noriskmessages" width="800" scrolling="no" height="700" marginheight="10" marginwidth="0" style="border:none"></iframe>
  </div>
